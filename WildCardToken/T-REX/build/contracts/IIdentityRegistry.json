{
  "contractName": "IIdentityRegistry",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "claimTopicsRegistry",
          "type": "address"
        }
      ],
      "name": "ClaimTopicsRegistrySet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investorAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint16",
          "name": "country",
          "type": "uint16"
        }
      ],
      "name": "CountryUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investorAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IIdentity",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "IdentityRegistered",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "investorAddress",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IIdentity",
          "name": "identity",
          "type": "address"
        }
      ],
      "name": "IdentityRemoved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "identityStorage",
          "type": "address"
        }
      ],
      "name": "IdentityStorageSet",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "contract IIdentity",
          "name": "oldIdentity",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IIdentity",
          "name": "newIdentity",
          "type": "address"
        }
      ],
      "name": "IdentityUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "trustedIssuersRegistry",
          "type": "address"
        }
      ],
      "name": "TrustedIssuersRegistrySet",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "contract IIdentity",
          "name": "_identity",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_country",
          "type": "uint16"
        }
      ],
      "name": "registerIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "deleteIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_identityRegistryStorage",
          "type": "address"
        }
      ],
      "name": "setIdentityRegistryStorage",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_claimTopicsRegistry",
          "type": "address"
        }
      ],
      "name": "setClaimTopicsRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_trustedIssuersRegistry",
          "type": "address"
        }
      ],
      "name": "setTrustedIssuersRegistry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "_country",
          "type": "uint16"
        }
      ],
      "name": "updateCountry",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        },
        {
          "internalType": "contract IIdentity",
          "name": "_identity",
          "type": "address"
        }
      ],
      "name": "updateIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_userAddresses",
          "type": "address[]"
        },
        {
          "internalType": "contract IIdentity[]",
          "name": "_identities",
          "type": "address[]"
        },
        {
          "internalType": "uint16[]",
          "name": "_countries",
          "type": "uint16[]"
        }
      ],
      "name": "batchRegisterIdentity",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "contains",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "isVerified",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "identity",
      "outputs": [
        {
          "internalType": "contract IIdentity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_userAddress",
          "type": "address"
        }
      ],
      "name": "investorCountry",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "identityStorage",
      "outputs": [
        {
          "internalType": "contract IIdentityRegistryStorage",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "issuersRegistry",
      "outputs": [
        {
          "internalType": "contract ITrustedIssuersRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "topicsRegistry",
      "outputs": [
        {
          "internalType": "contract IClaimTopicsRegistry",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnershipOnIdentityRegistryContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agent",
          "type": "address"
        }
      ],
      "name": "addAgentOnIdentityRegistryContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_agent",
          "type": "address"
        }
      ],
      "name": "removeAgentOnIdentityRegistryContract",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"claimTopicsRegistry\",\"type\":\"address\"}],\"name\":\"ClaimTopicsRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint16\",\"name\":\"country\",\"type\":\"uint16\"}],\"name\":\"CountryUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRegistered\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"investorAddress\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"IdentityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identityStorage\",\"type\":\"address\"}],\"name\":\"IdentityStorageSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"oldIdentity\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IIdentity\",\"name\":\"newIdentity\",\"type\":\"address\"}],\"name\":\"IdentityUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"trustedIssuersRegistry\",\"type\":\"address\"}],\"name\":\"TrustedIssuersRegistrySet\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"addAgentOnIdentityRegistryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_userAddresses\",\"type\":\"address[]\"},{\"internalType\":\"contract IIdentity[]\",\"name\":\"_identities\",\"type\":\"address[]\"},{\"internalType\":\"uint16[]\",\"name\":\"_countries\",\"type\":\"uint16[]\"}],\"name\":\"batchRegisterIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"contains\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"deleteIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"identity\",\"outputs\":[{\"internalType\":\"contract IIdentity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"identityStorage\",\"outputs\":[{\"internalType\":\"contract IIdentityRegistryStorage\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"investorCountry\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"}],\"name\":\"isVerified\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"issuersRegistry\",\"outputs\":[{\"internalType\":\"contract ITrustedIssuersRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"registerIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_agent\",\"type\":\"address\"}],\"name\":\"removeAgentOnIdentityRegistryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_claimTopicsRegistry\",\"type\":\"address\"}],\"name\":\"setClaimTopicsRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identityRegistryStorage\",\"type\":\"address\"}],\"name\":\"setIdentityRegistryStorage\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_trustedIssuersRegistry\",\"type\":\"address\"}],\"name\":\"setTrustedIssuersRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"topicsRegistry\",\"outputs\":[{\"internalType\":\"contract IClaimTopicsRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnershipOnIdentityRegistryContract\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"_country\",\"type\":\"uint16\"}],\"name\":\"updateCountry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_userAddress\",\"type\":\"address\"},{\"internalType\":\"contract IIdentity\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"updateIdentity\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addAgentOnIdentityRegistryContract(address)\":{\"params\":{\"_agent\":\"The _agent's address to add.\"}},\"batchRegisterIdentity(address[],address[],uint16[])\":{\"details\":\"function allowing to register identities in batch  This function can only be called by a wallet set as agent of the smart contract  Requires that none of the users has an identity contract already registered.  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \\\"OUT OF GAS\\\" TRANSACTION\",\"params\":{\"_countries\":\"The countries of the corresponding investors  emits _userAddresses.length `IdentityRegistered` events\",\"_identities\":\"The addresses of the corresponding identity contracts\",\"_userAddresses\":\"The addresses of the users\"}},\"contains(address)\":{\"details\":\"This functions checks whether a wallet has its Identity registered or not  in the Identity Registry.\",\"params\":{\"_userAddress\":\"The address of the user to be checked.\"},\"returns\":{\"_0\":\"'True' if the address is contained in the Identity Registry, 'false' if not.\"}},\"deleteIdentity(address)\":{\"details\":\"Removes an user from the identity registry.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_userAddress\":\"The address of the user to be removed  emits `IdentityRemoved` event\"}},\"identity(address)\":{\"details\":\"Returns the onchainID of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"identityStorage()\":{\"details\":\"Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\"},\"investorCountry(address)\":{\"details\":\"Returns the country code of an investor.\",\"params\":{\"_userAddress\":\"The wallet of the investor\"}},\"isVerified(address)\":{\"details\":\"This functions checks whether an identity contract  corresponding to the provided user address has the required claims or not based  on the data fetched from trusted issuers registry and from the claim topics registry\",\"params\":{\"_userAddress\":\"The address of the user to be verified.\"},\"returns\":{\"_0\":\"'True' if the address is verified, 'false' if not.\"}},\"issuersRegistry()\":{\"details\":\"Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.\"},\"registerIdentity(address,address,uint16)\":{\"details\":\"Register an identity contract corresponding to a user address.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_country\":\"The country of the investor  emits `IdentityRegistered` event\",\"_identity\":\"The address of the user's identity contract\",\"_userAddress\":\"The address of the user\"}},\"removeAgentOnIdentityRegistryContract(address)\":{\"params\":{\"_agent\":\"The _agent's address to remove.\"}},\"setClaimTopicsRegistry(address)\":{\"details\":\"Replace the actual claimTopicsRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_claimTopicsRegistry\":\"The address of the new claim Topics Registry  emits `ClaimTopicsRegistrySet` event\"}},\"setIdentityRegistryStorage(address)\":{\"details\":\"Replace the actual identityRegistryStorage contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_identityRegistryStorage\":\"The address of the new Identity Registry Storage  emits `IdentityStorageSet` event\"}},\"setTrustedIssuersRegistry(address)\":{\"details\":\"Replace the actual trustedIssuersRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract\",\"params\":{\"_trustedIssuersRegistry\":\"The address of the new Trusted Issuers Registry  emits `TrustedIssuersRegistrySet` event\"}},\"topicsRegistry()\":{\"details\":\"Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\"},\"transferOwnershipOnIdentityRegistryContract(address)\":{\"params\":{\"_newOwner\":\"The new owner of this contract.\"}},\"updateCountry(address,uint16)\":{\"details\":\"Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_country\":\"The new country of the user  emits `CountryUpdated` event\",\"_userAddress\":\"The address of the user\"}},\"updateIdentity(address,address)\":{\"details\":\"Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract\",\"params\":{\"_identity\":\"The address of the user's new identity contract  emits `IdentityUpdated` event\",\"_userAddress\":\"The address of the user\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimTopicsRegistrySet(address)\":{\"notice\":\"this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\"},\"CountryUpdated(address,uint16)\":{\"notice\":\"this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country\"},\"IdentityRegistered(address,address)\":{\"notice\":\"this event is emitted when an Identity is registered into the Identity Registry.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityRemoved(address,address)\":{\"notice\":\"this event is emitted when an Identity is removed from the Identity Registry.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)\"},\"IdentityStorageSet(address)\":{\"notice\":\"this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `identityStorage` is the address of the Identity Registry Storage contract\"},\"IdentityUpdated(address,address)\":{\"notice\":\"this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's\"},\"TrustedIssuersRegistrySet(address)\":{\"notice\":\"this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract\"}},\"kind\":\"user\",\"methods\":{\"addAgentOnIdentityRegistryContract(address)\":{\"notice\":\"Adds an address as _agent of the Identity Registry Contract.  This function can only be called by the wallet set as owner of the smart contract\"},\"removeAgentOnIdentityRegistryContract(address)\":{\"notice\":\"Removes an address from being _agent of the Identity Registry Contract.  This function can only be called by the wallet set as owner of the smart contract\"},\"transferOwnershipOnIdentityRegistryContract(address)\":{\"notice\":\"Transfers the Ownership of the Identity Registry to a new Owner.  This function can only be called by the wallet set as owner of the smart contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"project:/contracts/registry/IIdentityRegistry.sol\":\"IIdentityRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol\":{\"keccak256\":\"0xd0493be7cb7342962b46f8e2afdca4614ea0fe34a7f493b2da9db7d361a9042c\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://105232aae24e3d0fcb4c80c00793b61b6019f6127c0ec6f9e3082ae01b2e778b\",\"dweb:/ipfs/QmV5C1wbq7H5H6DiakafSX5agAAP6rQSZ5qq7Qgq6VLkXo\"]},\"@onchain-id/solidity/contracts/interface/IERC734.sol\":{\"keccak256\":\"0x3302de9e9fe7a548cb7395b6fda38f952f6a6d1c599dfeee181a1ef80741fc1d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://fc9f00e5b2f1523fecf52b1a833e9263a53edbebb7d1458f9004cfd41dd0402e\",\"dweb:/ipfs/QmWcNcVQrg66KeQz39jPgJun7jF3CbdJKHQa19q97n5Hzb\"]},\"@onchain-id/solidity/contracts/interface/IERC735.sol\":{\"keccak256\":\"0x3b77ce6012a96cf0075197cdeb1b98b66ca1722ef23241e40ba6185f03bf4584\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://766e139f0c3cc0c6489561e75df0d8eab8c277f90009e4fa19add4f22bb40d82\",\"dweb:/ipfs/QmcbAReZn9nLcnYn9AHiDmcYJ42JqAU5QSy4dKhUcJUnjy\"]},\"@onchain-id/solidity/contracts/interface/IIdentity.sol\":{\"keccak256\":\"0xdcefbe2a850f9f43e959b9f7ed93fd5b35f29ff3dfbfaac7530af737c9eba7c6\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://2e887c7cc67fdb2710c48bed22dbb27880f6dfb84ee93178ad4fcd659099cb96\",\"dweb:/ipfs/QmUuDEsZJC7uQQEErmuNJzePsNgHiTDdS2TuMzG1GRqrC3\"]},\"project:/contracts/registry/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0x95f8fa17a716771125b203f00890eceb20ac3807f7a39a25b644427b1ff81d61\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://460dceb9e88957d5ce002b80748767c80a7e146c9b38b055a3c1ca04586b2009\",\"dweb:/ipfs/QmVdqEpGMRzSpLKBCtPzaPGatBgUyNm3NS5rQnkkYMnc1C\"]},\"project:/contracts/registry/IIdentityRegistry.sol\":{\"keccak256\":\"0x16a31f2d35143f99cc6b83d0cf6e9da9543c2b8561712079098f3a39d12ae32a\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://7669a9272b1df8e27e0fc3f5f64977b2b16615e585b673383db1eb157a62bf7c\",\"dweb:/ipfs/QmQzXmoFcFyBPehPyiUzGjaKfXJHLEPZMtFTBTgjuCavah\"]},\"project:/contracts/registry/IIdentityRegistryStorage.sol\":{\"keccak256\":\"0x8cd4de1e77c5da8ca2ff732069bc184aef86bcb94f95a5229e5bd6336abbd06d\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://f88894a3d046940be03a12cc2da3b3fb6efb51e0461fbea060a9a3190cadcf16\",\"dweb:/ipfs/QmNndZUPdpc83A9LungeAsrcencq3CzTum1tkU6KVdSRNC\"]},\"project:/contracts/registry/ITrustedIssuersRegistry.sol\":{\"keccak256\":\"0x01af20f2f537db3122c60b7c6e60e5036e07c673ef9762428b42129f65fcbc60\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://28f514b876c975777fe84bdb9f96ec5c687e4e4ff5d2b14961ba61affc57d46c\",\"dweb:/ipfs/QmdbVRsg1Q71PVHYxy1r7e5MeiMN5hHHDD8vRnXBSr8JiV\"]}},\"version\":1}",
  "bytecode": "0x",
  "deployedBytecode": "0x",
  "immutableReferences": {},
  "generatedSources": [],
  "deployedGeneratedSources": [],
  "sourceMap": "",
  "deployedSourceMap": "",
  "source": "// SPDX-License-Identifier: GPL-3.0\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts developed by Tokeny to manage and transfer financial assets on the ethereum blockchain\n *\n *     Copyright (C) 2021, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity ^0.8.0;\n\nimport '../registry/ITrustedIssuersRegistry.sol';\nimport '../registry/IClaimTopicsRegistry.sol';\nimport '../registry/IIdentityRegistryStorage.sol';\n\nimport '@onchain-id/solidity/contracts/interface/IClaimIssuer.sol';\nimport '@onchain-id/solidity/contracts/interface/IIdentity.sol';\n\ninterface IIdentityRegistry {\n    /**\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `claimTopicsRegistry` is the address of the Claim Topics Registry contract\n     */\n    event ClaimTopicsRegistrySet(address indexed claimTopicsRegistry);\n\n    /**\n     *  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `identityStorage` is the address of the Identity Registry Storage contract\n     */\n    event IdentityStorageSet(address indexed identityStorage);\n\n    /**\n     *  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n     *  the event is emitted by the IdentityRegistry constructor\n     *  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract\n     */\n    event TrustedIssuersRegistrySet(address indexed trustedIssuersRegistry);\n\n    /**\n     *  this event is emitted when an Identity is registered into the Identity Registry.\n     *  the event is emitted by the 'registerIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityRegistered(address indexed investorAddress, IIdentity indexed identity);\n\n    /**\n     *  this event is emitted when an Identity is removed from the Identity Registry.\n     *  the event is emitted by the 'deleteIdentity' function\n     *  `investorAddress` is the address of the investor's wallet\n     *  `identity` is the address of the Identity smart contract (onchainID)\n     */\n    event IdentityRemoved(address indexed investorAddress, IIdentity indexed identity);\n\n    /**\n     *  this event is emitted when an Identity has been updated\n     *  the event is emitted by the 'updateIdentity' function\n     *  `oldIdentity` is the old Identity contract's address to update\n     *  `newIdentity` is the new Identity contract's\n     */\n    event IdentityUpdated(IIdentity indexed oldIdentity, IIdentity indexed newIdentity);\n\n    /**\n     *  this event is emitted when an Identity's country has been updated\n     *  the event is emitted by the 'updateCountry' function\n     *  `investorAddress` is the address on which the country has been updated\n     *  `country` is the numeric code (ISO 3166-1) of the new country\n     */\n    event CountryUpdated(address indexed investorAddress, uint16 indexed country);\n\n    /**\n     *  @dev Register an identity contract corresponding to a user address.\n     *  Requires that the user doesn't have an identity contract already registered.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's identity contract\n     *  @param _country The country of the investor\n     *  emits `IdentityRegistered` event\n     */\n    function registerIdentity(\n        address _userAddress,\n        IIdentity _identity,\n        uint16 _country\n    ) external;\n\n    /**\n     *  @dev Removes an user from the identity registry.\n     *  Requires that the user have an identity contract already deployed that will be deleted.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user to be removed\n     *  emits `IdentityRemoved` event\n     */\n    function deleteIdentity(address _userAddress) external;\n\n    /**\n     *  @dev Replace the actual identityRegistryStorage contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _identityRegistryStorage The address of the new Identity Registry Storage\n     *  emits `IdentityStorageSet` event\n     */\n    function setIdentityRegistryStorage(address _identityRegistryStorage) external;\n\n    /**\n     *  @dev Replace the actual claimTopicsRegistry contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _claimTopicsRegistry The address of the new claim Topics Registry\n     *  emits `ClaimTopicsRegistrySet` event\n     */\n    function setClaimTopicsRegistry(address _claimTopicsRegistry) external;\n\n    /**\n     *  @dev Replace the actual trustedIssuersRegistry contract with a new one.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _trustedIssuersRegistry The address of the new Trusted Issuers Registry\n     *  emits `TrustedIssuersRegistrySet` event\n     */\n    function setTrustedIssuersRegistry(address _trustedIssuersRegistry) external;\n\n    /**\n     *  @dev Updates the country corresponding to a user address.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _country The new country of the user\n     *  emits `CountryUpdated` event\n     */\n    function updateCountry(address _userAddress, uint16 _country) external;\n\n    /**\n     *  @dev Updates an identity contract corresponding to a user address.\n     *  Requires that the user address should be the owner of the identity contract.\n     *  Requires that the user should have an identity contract already deployed that will be replaced.\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  @param _userAddress The address of the user\n     *  @param _identity The address of the user's new identity contract\n     *  emits `IdentityUpdated` event\n     */\n    function updateIdentity(address _userAddress, IIdentity _identity) external;\n\n    /**\n     *  @dev function allowing to register identities in batch\n     *  This function can only be called by a wallet set as agent of the smart contract\n     *  Requires that none of the users has an identity contract already registered.\n     *  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n     *  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n     *  @param _userAddresses The addresses of the users\n     *  @param _identities The addresses of the corresponding identity contracts\n     *  @param _countries The countries of the corresponding investors\n     *  emits _userAddresses.length `IdentityRegistered` events\n     */\n    function batchRegisterIdentity(\n        address[] calldata _userAddresses,\n        IIdentity[] calldata _identities,\n        uint16[] calldata _countries\n    ) external;\n\n    /**\n     *  @dev This functions checks whether a wallet has its Identity registered or not\n     *  in the Identity Registry.\n     *  @param _userAddress The address of the user to be checked.\n     *  @return 'True' if the address is contained in the Identity Registry, 'false' if not.\n     */\n    function contains(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev This functions checks whether an identity contract\n     *  corresponding to the provided user address has the required claims or not based\n     *  on the data fetched from trusted issuers registry and from the claim topics registry\n     *  @param _userAddress The address of the user to be verified.\n     *  @return 'True' if the address is verified, 'false' if not.\n     */\n    function isVerified(address _userAddress) external view returns (bool);\n\n    /**\n     *  @dev Returns the onchainID of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function identity(address _userAddress) external view returns (IIdentity);\n\n    /**\n     *  @dev Returns the country code of an investor.\n     *  @param _userAddress The wallet of the investor\n     */\n    function investorCountry(address _userAddress) external view returns (uint16);\n\n    /**\n     *  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry.\n     */\n    function identityStorage() external view returns (IIdentityRegistryStorage);\n\n    /**\n     *  @dev Returns the TrustedIssuersRegistry linked to the current IdentityRegistry.\n     */\n    function issuersRegistry() external view returns (ITrustedIssuersRegistry);\n\n    /**\n     *  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry.\n     */\n    function topicsRegistry() external view returns (IClaimTopicsRegistry);\n\n    /**\n     *  @notice Transfers the Ownership of the Identity Registry to a new Owner.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _newOwner The new owner of this contract.\n     */\n    function transferOwnershipOnIdentityRegistryContract(address _newOwner) external;\n\n    /**\n     *  @notice Adds an address as _agent of the Identity Registry Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _agent The _agent's address to add.\n     */\n    function addAgentOnIdentityRegistryContract(address _agent) external;\n\n    /**\n     *  @notice Removes an address from being _agent of the Identity Registry Contract.\n     *  This function can only be called by the wallet set as owner of the smart contract\n     *  @param _agent The _agent's address to remove.\n     */\n    function removeAgentOnIdentityRegistryContract(address _agent) external;\n}\n",
  "sourcePath": "/home/mayank/Desktop/security-token-5/Prototype--Craye-Realstate/T-REX/contracts/registry/IIdentityRegistry.sol",
  "ast": {
    "absolutePath": "project:/contracts/registry/IIdentityRegistry.sol",
    "exportedSymbols": {
      "IClaimIssuer": [
        1456
      ],
      "IClaimTopicsRegistry": [
        10172
      ],
      "IERC734": [
        1609
      ],
      "IERC735": [
        1734
      ],
      "IIdentity": [
        1743
      ],
      "IIdentityRegistry": [
        10365
      ],
      "IIdentityRegistryStorage": [
        10487
      ],
      "ITrustedIssuersRegistry": [
        10584
      ]
    },
    "id": 10366,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10174,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "1093:23:53"
      },
      {
        "absolutePath": "project:/contracts/registry/ITrustedIssuersRegistry.sol",
        "file": "../registry/ITrustedIssuersRegistry.sol",
        "id": 10175,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10366,
        "sourceUnit": 10585,
        "src": "1118:49:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/registry/IClaimTopicsRegistry.sol",
        "file": "../registry/IClaimTopicsRegistry.sol",
        "id": 10176,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10366,
        "sourceUnit": 10173,
        "src": "1168:46:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/registry/IIdentityRegistryStorage.sol",
        "file": "../registry/IIdentityRegistryStorage.sol",
        "id": 10177,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10366,
        "sourceUnit": 10488,
        "src": "1215:50:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
        "file": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
        "id": 10178,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10366,
        "sourceUnit": 1457,
        "src": "1267:67:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
        "file": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
        "id": 10179,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10366,
        "sourceUnit": 1744,
        "src": "1335:64:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IIdentityRegistry",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 10365,
        "linearizedBaseContracts": [
          10365
        ],
        "name": "IIdentityRegistry",
        "nameLocation": "1411:17:53",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 10180,
              "nodeType": "StructuredDocumentation",
              "src": "1435:256:53",
              "text": "  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `claimTopicsRegistry` is the address of the Claim Topics Registry contract"
            },
            "eventSelector": "7170bf15b246e880b2369cd7c67d057760d8a35149e8c64dde91efa22bcc76d0",
            "id": 10184,
            "name": "ClaimTopicsRegistrySet",
            "nameLocation": "1702:22:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10183,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10182,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimTopicsRegistry",
                  "nameLocation": "1741:19:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10184,
                  "src": "1725:35:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10181,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1725:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1724:37:53"
            },
            "src": "1696:66:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10185,
              "nodeType": "StructuredDocumentation",
              "src": "1768:260:53",
              "text": "  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `identityStorage` is the address of the Identity Registry Storage contract"
            },
            "eventSelector": "2fa8b95c1db7afe99e3398f3792f008135cedc1fa26b0bb2ecd2352cd166d53c",
            "id": 10189,
            "name": "IdentityStorageSet",
            "nameLocation": "2039:18:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10188,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10187,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "identityStorage",
                  "nameLocation": "2074:15:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10189,
                  "src": "2058:31:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10186,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2058:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2057:33:53"
            },
            "src": "2033:58:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10190,
              "nodeType": "StructuredDocumentation",
              "src": "2097:262:53",
              "text": "  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract"
            },
            "eventSelector": "1b98cb79e6f73020175fe87333f1b91ad6a881519c0afe30340c2599b2b4bde0",
            "id": 10194,
            "name": "TrustedIssuersRegistrySet",
            "nameLocation": "2370:25:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10193,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10192,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "trustedIssuersRegistry",
                  "nameLocation": "2412:22:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10194,
                  "src": "2396:38:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10191,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2396:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2395:40:53"
            },
            "src": "2364:72:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10195,
              "nodeType": "StructuredDocumentation",
              "src": "2442:307:53",
              "text": "  this event is emitted when an Identity is registered into the Identity Registry.\n  the event is emitted by the 'registerIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
            },
            "eventSelector": "6ae73635c50d24a45af6fbd5e016ac4bed179addbc8bf24e04ff0fcc6d33af19",
            "id": 10202,
            "name": "IdentityRegistered",
            "nameLocation": "2760:18:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10201,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10197,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "investorAddress",
                  "nameLocation": "2795:15:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10202,
                  "src": "2779:31:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10196,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2779:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10200,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "identity",
                  "nameLocation": "2830:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10202,
                  "src": "2812:26:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10199,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10198,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "2812:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "2812:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2778:61:53"
            },
            "src": "2754:86:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10203,
              "nodeType": "StructuredDocumentation",
              "src": "2846:302:53",
              "text": "  this event is emitted when an Identity is removed from the Identity Registry.\n  the event is emitted by the 'deleteIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
            },
            "eventSelector": "59d6590e225b81befe259af056324092801080acbb7feab310eb34678871f327",
            "id": 10210,
            "name": "IdentityRemoved",
            "nameLocation": "3159:15:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10209,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10205,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "investorAddress",
                  "nameLocation": "3191:15:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10210,
                  "src": "3175:31:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10204,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3175:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10208,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "identity",
                  "nameLocation": "3226:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10210,
                  "src": "3208:26:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10207,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10206,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "3208:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "3208:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3174:61:53"
            },
            "src": "3153:83:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10211,
              "nodeType": "StructuredDocumentation",
              "src": "3242:261:53",
              "text": "  this event is emitted when an Identity has been updated\n  the event is emitted by the 'updateIdentity' function\n  `oldIdentity` is the old Identity contract's address to update\n  `newIdentity` is the new Identity contract's"
            },
            "eventSelector": "e98082932c8056a0f514da9104e4a66bc2cbaef102ad59d90c4b24220ebf6010",
            "id": 10219,
            "name": "IdentityUpdated",
            "nameLocation": "3514:15:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10218,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10214,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "oldIdentity",
                  "nameLocation": "3548:11:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10219,
                  "src": "3530:29:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10213,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10212,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "3530:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "3530:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10217,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "newIdentity",
                  "nameLocation": "3579:11:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10219,
                  "src": "3561:29:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10216,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10215,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "3561:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "3561:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3529:62:53"
            },
            "src": "3508:84:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10220,
              "nodeType": "StructuredDocumentation",
              "src": "3598:295:53",
              "text": "  this event is emitted when an Identity's country has been updated\n  the event is emitted by the 'updateCountry' function\n  `investorAddress` is the address on which the country has been updated\n  `country` is the numeric code (ISO 3166-1) of the new country"
            },
            "eventSelector": "04ed3b726495c2dca1ff1215d9ca54e1a4030abb5e82b0f6ce55702416cee853",
            "id": 10226,
            "name": "CountryUpdated",
            "nameLocation": "3904:14:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10225,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10222,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "investorAddress",
                  "nameLocation": "3935:15:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10226,
                  "src": "3919:31:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10221,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3919:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10224,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "country",
                  "nameLocation": "3967:7:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10226,
                  "src": "3952:22:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 10223,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "3952:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3918:57:53"
            },
            "src": "3898:78:53"
          },
          {
            "documentation": {
              "id": 10227,
              "nodeType": "StructuredDocumentation",
              "src": "3982:474:53",
              "text": "  @dev Register an identity contract corresponding to a user address.\n  Requires that the user doesn't have an identity contract already registered.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's identity contract\n  @param _country The country of the investor\n  emits `IdentityRegistered` event"
            },
            "functionSelector": "454a03e0",
            "id": 10237,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerIdentity",
            "nameLocation": "4470:16:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10235,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10229,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "4504:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10237,
                  "src": "4496:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10228,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4496:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10232,
                  "mutability": "mutable",
                  "name": "_identity",
                  "nameLocation": "4536:9:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10237,
                  "src": "4526:19:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10231,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10230,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "4526:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "4526:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10234,
                  "mutability": "mutable",
                  "name": "_country",
                  "nameLocation": "4562:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10237,
                  "src": "4555:15:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 10233,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "4555:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4486:90:53"
            },
            "returnParameters": {
              "id": 10236,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4585:0:53"
            },
            "scope": 10365,
            "src": "4461:125:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10238,
              "nodeType": "StructuredDocumentation",
              "src": "4592:356:53",
              "text": "  @dev Removes an user from the identity registry.\n  Requires that the user have an identity contract already deployed that will be deleted.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user to be removed\n  emits `IdentityRemoved` event"
            },
            "functionSelector": "a8d29d1d",
            "id": 10243,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deleteIdentity",
            "nameLocation": "4962:14:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10241,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10240,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "4985:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10243,
                  "src": "4977:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10239,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4977:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4976:22:53"
            },
            "returnParameters": {
              "id": 10242,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5007:0:53"
            },
            "scope": 10365,
            "src": "4953:55:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10244,
              "nodeType": "StructuredDocumentation",
              "src": "5014:312:53",
              "text": "  @dev Replace the actual identityRegistryStorage contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _identityRegistryStorage The address of the new Identity Registry Storage\n  emits `IdentityStorageSet` event"
            },
            "functionSelector": "26d941ae",
            "id": 10249,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setIdentityRegistryStorage",
            "nameLocation": "5340:26:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10247,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10246,
                  "mutability": "mutable",
                  "name": "_identityRegistryStorage",
                  "nameLocation": "5375:24:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10249,
                  "src": "5367:32:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10245,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5367:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5366:34:53"
            },
            "returnParameters": {
              "id": 10248,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5409:0:53"
            },
            "scope": 10365,
            "src": "5331:79:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10250,
              "nodeType": "StructuredDocumentation",
              "src": "5416:304:53",
              "text": "  @dev Replace the actual claimTopicsRegistry contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _claimTopicsRegistry The address of the new claim Topics Registry\n  emits `ClaimTopicsRegistrySet` event"
            },
            "functionSelector": "670af6a9",
            "id": 10255,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setClaimTopicsRegistry",
            "nameLocation": "5734:22:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10253,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10252,
                  "mutability": "mutable",
                  "name": "_claimTopicsRegistry",
                  "nameLocation": "5765:20:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10255,
                  "src": "5757:28:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10251,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5757:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5756:30:53"
            },
            "returnParameters": {
              "id": 10254,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5795:0:53"
            },
            "scope": 10365,
            "src": "5725:71:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10256,
              "nodeType": "StructuredDocumentation",
              "src": "5802:316:53",
              "text": "  @dev Replace the actual trustedIssuersRegistry contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _trustedIssuersRegistry The address of the new Trusted Issuers Registry\n  emits `TrustedIssuersRegistrySet` event"
            },
            "functionSelector": "e744d789",
            "id": 10261,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTrustedIssuersRegistry",
            "nameLocation": "6132:25:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10258,
                  "mutability": "mutable",
                  "name": "_trustedIssuersRegistry",
                  "nameLocation": "6166:23:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10261,
                  "src": "6158:31:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10257,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6158:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6157:33:53"
            },
            "returnParameters": {
              "id": 10260,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6199:0:53"
            },
            "scope": 10365,
            "src": "6123:77:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10262,
              "nodeType": "StructuredDocumentation",
              "src": "6206:410:53",
              "text": "  @dev Updates the country corresponding to a user address.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _country The new country of the user\n  emits `CountryUpdated` event"
            },
            "functionSelector": "3b239a7f",
            "id": 10269,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateCountry",
            "nameLocation": "6630:13:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10267,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10264,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "6652:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10269,
                  "src": "6644:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10263,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6644:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10266,
                  "mutability": "mutable",
                  "name": "_country",
                  "nameLocation": "6673:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10269,
                  "src": "6666:15:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 10265,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "6666:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6643:39:53"
            },
            "returnParameters": {
              "id": 10268,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6691:0:53"
            },
            "scope": 10365,
            "src": "6621:71:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10270,
              "nodeType": "StructuredDocumentation",
              "src": "6698:526:53",
              "text": "  @dev Updates an identity contract corresponding to a user address.\n  Requires that the user address should be the owner of the identity contract.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's new identity contract\n  emits `IdentityUpdated` event"
            },
            "functionSelector": "8e098ca1",
            "id": 10278,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateIdentity",
            "nameLocation": "7238:14:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10276,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10272,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "7261:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10278,
                  "src": "7253:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10271,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7253:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10275,
                  "mutability": "mutable",
                  "name": "_identity",
                  "nameLocation": "7285:9:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10278,
                  "src": "7275:19:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10274,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10273,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "7275:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "7275:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7252:43:53"
            },
            "returnParameters": {
              "id": 10277,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7304:0:53"
            },
            "scope": 10365,
            "src": "7229:76:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10279,
              "nodeType": "StructuredDocumentation",
              "src": "7311:701:53",
              "text": "  @dev function allowing to register identities in batch\n  This function can only be called by a wallet set as agent of the smart contract\n  Requires that none of the users has an identity contract already registered.\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses of the users\n  @param _identities The addresses of the corresponding identity contracts\n  @param _countries The countries of the corresponding investors\n  emits _userAddresses.length `IdentityRegistered` events"
            },
            "functionSelector": "653dc9f1",
            "id": 10292,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "batchRegisterIdentity",
            "nameLocation": "8026:21:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10290,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10282,
                  "mutability": "mutable",
                  "name": "_userAddresses",
                  "nameLocation": "8076:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10292,
                  "src": "8057:33:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10280,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8057:7:53",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 10281,
                    "nodeType": "ArrayTypeName",
                    "src": "8057:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10286,
                  "mutability": "mutable",
                  "name": "_identities",
                  "nameLocation": "8121:11:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10292,
                  "src": "8100:32:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IIdentity_$1743_$dyn_calldata_ptr",
                    "typeString": "contract IIdentity[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10284,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 10283,
                        "name": "IIdentity",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1743,
                        "src": "8100:9:53"
                      },
                      "referencedDeclaration": 1743,
                      "src": "8100:9:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IIdentity_$1743",
                        "typeString": "contract IIdentity"
                      }
                    },
                    "id": 10285,
                    "nodeType": "ArrayTypeName",
                    "src": "8100:11:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IIdentity_$1743_$dyn_storage_ptr",
                      "typeString": "contract IIdentity[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10289,
                  "mutability": "mutable",
                  "name": "_countries",
                  "nameLocation": "8160:10:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10292,
                  "src": "8142:28:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint16_$dyn_calldata_ptr",
                    "typeString": "uint16[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10287,
                      "name": "uint16",
                      "nodeType": "ElementaryTypeName",
                      "src": "8142:6:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      }
                    },
                    "id": 10288,
                    "nodeType": "ArrayTypeName",
                    "src": "8142:8:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint16_$dyn_storage_ptr",
                      "typeString": "uint16[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8047:129:53"
            },
            "returnParameters": {
              "id": 10291,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8185:0:53"
            },
            "scope": 10365,
            "src": "8017:169:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10293,
              "nodeType": "StructuredDocumentation",
              "src": "8192:292:53",
              "text": "  @dev This functions checks whether a wallet has its Identity registered or not\n  in the Identity Registry.\n  @param _userAddress The address of the user to be checked.\n  @return 'True' if the address is contained in the Identity Registry, 'false' if not."
            },
            "functionSelector": "5dbe47e8",
            "id": 10300,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "contains",
            "nameLocation": "8498:8:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10296,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10295,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "8515:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10300,
                  "src": "8507:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10294,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8507:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8506:22:53"
            },
            "returnParameters": {
              "id": 10299,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10298,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10300,
                  "src": "8552:4:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10297,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8552:4:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8551:6:53"
            },
            "scope": 10365,
            "src": "8489:69:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10301,
              "nodeType": "StructuredDocumentation",
              "src": "8564:391:53",
              "text": "  @dev This functions checks whether an identity contract\n  corresponding to the provided user address has the required claims or not based\n  on the data fetched from trusted issuers registry and from the claim topics registry\n  @param _userAddress The address of the user to be verified.\n  @return 'True' if the address is verified, 'false' if not."
            },
            "functionSelector": "b9209e33",
            "id": 10308,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isVerified",
            "nameLocation": "8969:10:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10304,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10303,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "8988:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10308,
                  "src": "8980:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10302,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8980:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8979:22:53"
            },
            "returnParameters": {
              "id": 10307,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10306,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10308,
                  "src": "9025:4:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10305,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9025:4:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9024:6:53"
            },
            "scope": 10365,
            "src": "8960:71:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10309,
              "nodeType": "StructuredDocumentation",
              "src": "9037:117:53",
              "text": "  @dev Returns the onchainID of an investor.\n  @param _userAddress The wallet of the investor"
            },
            "functionSelector": "f0eb5e54",
            "id": 10317,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "identity",
            "nameLocation": "9168:8:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10312,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10311,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "9185:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10317,
                  "src": "9177:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10310,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9177:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9176:22:53"
            },
            "returnParameters": {
              "id": 10316,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10315,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10317,
                  "src": "9222:9:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10314,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10313,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "9222:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "9222:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9221:11:53"
            },
            "scope": 10365,
            "src": "9159:74:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10318,
              "nodeType": "StructuredDocumentation",
              "src": "9239:120:53",
              "text": "  @dev Returns the country code of an investor.\n  @param _userAddress The wallet of the investor"
            },
            "functionSelector": "7e42683b",
            "id": 10325,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "investorCountry",
            "nameLocation": "9373:15:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10321,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10320,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "9397:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10325,
                  "src": "9389:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10319,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9389:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9388:22:53"
            },
            "returnParameters": {
              "id": 10324,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10323,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10325,
                  "src": "9434:6:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 10322,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "9434:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9433:8:53"
            },
            "scope": 10365,
            "src": "9364:78:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10326,
              "nodeType": "StructuredDocumentation",
              "src": "9448:100:53",
              "text": "  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry."
            },
            "functionSelector": "f11abfd8",
            "id": 10332,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "identityStorage",
            "nameLocation": "9562:15:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10327,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9577:2:53"
            },
            "returnParameters": {
              "id": 10331,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10330,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10332,
                  "src": "9603:24:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentityRegistryStorage_$10487",
                    "typeString": "contract IIdentityRegistryStorage"
                  },
                  "typeName": {
                    "id": 10329,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10328,
                      "name": "IIdentityRegistryStorage",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10487,
                      "src": "9603:24:53"
                    },
                    "referencedDeclaration": 10487,
                    "src": "9603:24:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentityRegistryStorage_$10487",
                      "typeString": "contract IIdentityRegistryStorage"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9602:26:53"
            },
            "scope": 10365,
            "src": "9553:76:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10333,
              "nodeType": "StructuredDocumentation",
              "src": "9635:99:53",
              "text": "  @dev Returns the TrustedIssuersRegistry linked to the current IdentityRegistry."
            },
            "functionSelector": "b4f3fcb7",
            "id": 10339,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "issuersRegistry",
            "nameLocation": "9748:15:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10334,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9763:2:53"
            },
            "returnParameters": {
              "id": 10338,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10337,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10339,
                  "src": "9789:23:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ITrustedIssuersRegistry_$10584",
                    "typeString": "contract ITrustedIssuersRegistry"
                  },
                  "typeName": {
                    "id": 10336,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10335,
                      "name": "ITrustedIssuersRegistry",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10584,
                      "src": "9789:23:53"
                    },
                    "referencedDeclaration": 10584,
                    "src": "9789:23:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ITrustedIssuersRegistry_$10584",
                      "typeString": "contract ITrustedIssuersRegistry"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9788:25:53"
            },
            "scope": 10365,
            "src": "9739:75:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10340,
              "nodeType": "StructuredDocumentation",
              "src": "9820:96:53",
              "text": "  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry."
            },
            "functionSelector": "3b3e12f4",
            "id": 10346,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "topicsRegistry",
            "nameLocation": "9930:14:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10341,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9944:2:53"
            },
            "returnParameters": {
              "id": 10345,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10344,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10346,
                  "src": "9970:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IClaimTopicsRegistry_$10172",
                    "typeString": "contract IClaimTopicsRegistry"
                  },
                  "typeName": {
                    "id": 10343,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10342,
                      "name": "IClaimTopicsRegistry",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10172,
                      "src": "9970:20:53"
                    },
                    "referencedDeclaration": 10172,
                    "src": "9970:20:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IClaimTopicsRegistry_$10172",
                      "typeString": "contract IClaimTopicsRegistry"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9969:22:53"
            },
            "scope": 10365,
            "src": "9921:71:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10347,
              "nodeType": "StructuredDocumentation",
              "src": "9998:239:53",
              "text": "  @notice Transfers the Ownership of the Identity Registry to a new Owner.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _newOwner The new owner of this contract."
            },
            "functionSelector": "ce240d9c",
            "id": 10352,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferOwnershipOnIdentityRegistryContract",
            "nameLocation": "10251:43:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10350,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10349,
                  "mutability": "mutable",
                  "name": "_newOwner",
                  "nameLocation": "10303:9:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10352,
                  "src": "10295:17:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10348,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10295:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10294:19:53"
            },
            "returnParameters": {
              "id": 10351,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10322:0:53"
            },
            "scope": 10365,
            "src": "10242:81:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10353,
              "nodeType": "StructuredDocumentation",
              "src": "10329:229:53",
              "text": "  @notice Adds an address as _agent of the Identity Registry Contract.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _agent The _agent's address to add."
            },
            "functionSelector": "50bc7bda",
            "id": 10358,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addAgentOnIdentityRegistryContract",
            "nameLocation": "10572:34:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10356,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10355,
                  "mutability": "mutable",
                  "name": "_agent",
                  "nameLocation": "10615:6:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10358,
                  "src": "10607:14:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10354,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10607:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10606:16:53"
            },
            "returnParameters": {
              "id": 10357,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10631:0:53"
            },
            "scope": 10365,
            "src": "10563:69:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10359,
              "nodeType": "StructuredDocumentation",
              "src": "10638:243:53",
              "text": "  @notice Removes an address from being _agent of the Identity Registry Contract.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _agent The _agent's address to remove."
            },
            "functionSelector": "5e5741f3",
            "id": 10364,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeAgentOnIdentityRegistryContract",
            "nameLocation": "10895:37:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10362,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10361,
                  "mutability": "mutable",
                  "name": "_agent",
                  "nameLocation": "10941:6:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10364,
                  "src": "10933:14:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10360,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10933:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10932:16:53"
            },
            "returnParameters": {
              "id": 10363,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10957:0:53"
            },
            "scope": 10365,
            "src": "10886:72:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 10366,
        "src": "1401:9559:53",
        "usedErrors": []
      }
    ],
    "src": "1093:9868:53"
  },
  "legacyAST": {
    "absolutePath": "project:/contracts/registry/IIdentityRegistry.sol",
    "exportedSymbols": {
      "IClaimIssuer": [
        1456
      ],
      "IClaimTopicsRegistry": [
        10172
      ],
      "IERC734": [
        1609
      ],
      "IERC735": [
        1734
      ],
      "IIdentity": [
        1743
      ],
      "IIdentityRegistry": [
        10365
      ],
      "IIdentityRegistryStorage": [
        10487
      ],
      "ITrustedIssuersRegistry": [
        10584
      ]
    },
    "id": 10366,
    "license": "GPL-3.0",
    "nodeType": "SourceUnit",
    "nodes": [
      {
        "id": 10174,
        "literals": [
          "solidity",
          "^",
          "0.8",
          ".0"
        ],
        "nodeType": "PragmaDirective",
        "src": "1093:23:53"
      },
      {
        "absolutePath": "project:/contracts/registry/ITrustedIssuersRegistry.sol",
        "file": "../registry/ITrustedIssuersRegistry.sol",
        "id": 10175,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10366,
        "sourceUnit": 10585,
        "src": "1118:49:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/registry/IClaimTopicsRegistry.sol",
        "file": "../registry/IClaimTopicsRegistry.sol",
        "id": 10176,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10366,
        "sourceUnit": 10173,
        "src": "1168:46:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "project:/contracts/registry/IIdentityRegistryStorage.sol",
        "file": "../registry/IIdentityRegistryStorage.sol",
        "id": 10177,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10366,
        "sourceUnit": 10488,
        "src": "1215:50:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
        "file": "@onchain-id/solidity/contracts/interface/IClaimIssuer.sol",
        "id": 10178,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10366,
        "sourceUnit": 1457,
        "src": "1267:67:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "absolutePath": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
        "file": "@onchain-id/solidity/contracts/interface/IIdentity.sol",
        "id": 10179,
        "nameLocation": "-1:-1:-1",
        "nodeType": "ImportDirective",
        "scope": 10366,
        "sourceUnit": 1744,
        "src": "1335:64:53",
        "symbolAliases": [],
        "unitAlias": ""
      },
      {
        "abstract": false,
        "baseContracts": [],
        "canonicalName": "IIdentityRegistry",
        "contractDependencies": [],
        "contractKind": "interface",
        "fullyImplemented": false,
        "id": 10365,
        "linearizedBaseContracts": [
          10365
        ],
        "name": "IIdentityRegistry",
        "nameLocation": "1411:17:53",
        "nodeType": "ContractDefinition",
        "nodes": [
          {
            "anonymous": false,
            "documentation": {
              "id": 10180,
              "nodeType": "StructuredDocumentation",
              "src": "1435:256:53",
              "text": "  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `claimTopicsRegistry` is the address of the Claim Topics Registry contract"
            },
            "eventSelector": "7170bf15b246e880b2369cd7c67d057760d8a35149e8c64dde91efa22bcc76d0",
            "id": 10184,
            "name": "ClaimTopicsRegistrySet",
            "nameLocation": "1702:22:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10183,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10182,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "claimTopicsRegistry",
                  "nameLocation": "1741:19:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10184,
                  "src": "1725:35:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10181,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "1725:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1724:37:53"
            },
            "src": "1696:66:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10185,
              "nodeType": "StructuredDocumentation",
              "src": "1768:260:53",
              "text": "  this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `identityStorage` is the address of the Identity Registry Storage contract"
            },
            "eventSelector": "2fa8b95c1db7afe99e3398f3792f008135cedc1fa26b0bb2ecd2352cd166d53c",
            "id": 10189,
            "name": "IdentityStorageSet",
            "nameLocation": "2039:18:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10188,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10187,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "identityStorage",
                  "nameLocation": "2074:15:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10189,
                  "src": "2058:31:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10186,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2058:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2057:33:53"
            },
            "src": "2033:58:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10190,
              "nodeType": "StructuredDocumentation",
              "src": "2097:262:53",
              "text": "  this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry\n  the event is emitted by the IdentityRegistry constructor\n  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract"
            },
            "eventSelector": "1b98cb79e6f73020175fe87333f1b91ad6a881519c0afe30340c2599b2b4bde0",
            "id": 10194,
            "name": "TrustedIssuersRegistrySet",
            "nameLocation": "2370:25:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10193,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10192,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "trustedIssuersRegistry",
                  "nameLocation": "2412:22:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10194,
                  "src": "2396:38:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10191,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2396:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2395:40:53"
            },
            "src": "2364:72:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10195,
              "nodeType": "StructuredDocumentation",
              "src": "2442:307:53",
              "text": "  this event is emitted when an Identity is registered into the Identity Registry.\n  the event is emitted by the 'registerIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
            },
            "eventSelector": "6ae73635c50d24a45af6fbd5e016ac4bed179addbc8bf24e04ff0fcc6d33af19",
            "id": 10202,
            "name": "IdentityRegistered",
            "nameLocation": "2760:18:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10201,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10197,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "investorAddress",
                  "nameLocation": "2795:15:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10202,
                  "src": "2779:31:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10196,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "2779:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10200,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "identity",
                  "nameLocation": "2830:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10202,
                  "src": "2812:26:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10199,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10198,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "2812:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "2812:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2778:61:53"
            },
            "src": "2754:86:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10203,
              "nodeType": "StructuredDocumentation",
              "src": "2846:302:53",
              "text": "  this event is emitted when an Identity is removed from the Identity Registry.\n  the event is emitted by the 'deleteIdentity' function\n  `investorAddress` is the address of the investor's wallet\n  `identity` is the address of the Identity smart contract (onchainID)"
            },
            "eventSelector": "59d6590e225b81befe259af056324092801080acbb7feab310eb34678871f327",
            "id": 10210,
            "name": "IdentityRemoved",
            "nameLocation": "3159:15:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10209,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10205,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "investorAddress",
                  "nameLocation": "3191:15:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10210,
                  "src": "3175:31:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10204,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3175:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10208,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "identity",
                  "nameLocation": "3226:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10210,
                  "src": "3208:26:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10207,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10206,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "3208:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "3208:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3174:61:53"
            },
            "src": "3153:83:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10211,
              "nodeType": "StructuredDocumentation",
              "src": "3242:261:53",
              "text": "  this event is emitted when an Identity has been updated\n  the event is emitted by the 'updateIdentity' function\n  `oldIdentity` is the old Identity contract's address to update\n  `newIdentity` is the new Identity contract's"
            },
            "eventSelector": "e98082932c8056a0f514da9104e4a66bc2cbaef102ad59d90c4b24220ebf6010",
            "id": 10219,
            "name": "IdentityUpdated",
            "nameLocation": "3514:15:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10218,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10214,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "oldIdentity",
                  "nameLocation": "3548:11:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10219,
                  "src": "3530:29:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10213,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10212,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "3530:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "3530:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10217,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "newIdentity",
                  "nameLocation": "3579:11:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10219,
                  "src": "3561:29:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10216,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10215,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "3561:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "3561:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3529:62:53"
            },
            "src": "3508:84:53"
          },
          {
            "anonymous": false,
            "documentation": {
              "id": 10220,
              "nodeType": "StructuredDocumentation",
              "src": "3598:295:53",
              "text": "  this event is emitted when an Identity's country has been updated\n  the event is emitted by the 'updateCountry' function\n  `investorAddress` is the address on which the country has been updated\n  `country` is the numeric code (ISO 3166-1) of the new country"
            },
            "eventSelector": "04ed3b726495c2dca1ff1215d9ca54e1a4030abb5e82b0f6ce55702416cee853",
            "id": 10226,
            "name": "CountryUpdated",
            "nameLocation": "3904:14:53",
            "nodeType": "EventDefinition",
            "parameters": {
              "id": 10225,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10222,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "investorAddress",
                  "nameLocation": "3935:15:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10226,
                  "src": "3919:31:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10221,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3919:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10224,
                  "indexed": true,
                  "mutability": "mutable",
                  "name": "country",
                  "nameLocation": "3967:7:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10226,
                  "src": "3952:22:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 10223,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "3952:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "3918:57:53"
            },
            "src": "3898:78:53"
          },
          {
            "documentation": {
              "id": 10227,
              "nodeType": "StructuredDocumentation",
              "src": "3982:474:53",
              "text": "  @dev Register an identity contract corresponding to a user address.\n  Requires that the user doesn't have an identity contract already registered.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's identity contract\n  @param _country The country of the investor\n  emits `IdentityRegistered` event"
            },
            "functionSelector": "454a03e0",
            "id": 10237,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "registerIdentity",
            "nameLocation": "4470:16:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10235,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10229,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "4504:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10237,
                  "src": "4496:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10228,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4496:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10232,
                  "mutability": "mutable",
                  "name": "_identity",
                  "nameLocation": "4536:9:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10237,
                  "src": "4526:19:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10231,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10230,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "4526:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "4526:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10234,
                  "mutability": "mutable",
                  "name": "_country",
                  "nameLocation": "4562:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10237,
                  "src": "4555:15:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 10233,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "4555:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4486:90:53"
            },
            "returnParameters": {
              "id": 10236,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "4585:0:53"
            },
            "scope": 10365,
            "src": "4461:125:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10238,
              "nodeType": "StructuredDocumentation",
              "src": "4592:356:53",
              "text": "  @dev Removes an user from the identity registry.\n  Requires that the user have an identity contract already deployed that will be deleted.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user to be removed\n  emits `IdentityRemoved` event"
            },
            "functionSelector": "a8d29d1d",
            "id": 10243,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "deleteIdentity",
            "nameLocation": "4962:14:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10241,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10240,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "4985:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10243,
                  "src": "4977:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10239,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4977:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "4976:22:53"
            },
            "returnParameters": {
              "id": 10242,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5007:0:53"
            },
            "scope": 10365,
            "src": "4953:55:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10244,
              "nodeType": "StructuredDocumentation",
              "src": "5014:312:53",
              "text": "  @dev Replace the actual identityRegistryStorage contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _identityRegistryStorage The address of the new Identity Registry Storage\n  emits `IdentityStorageSet` event"
            },
            "functionSelector": "26d941ae",
            "id": 10249,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setIdentityRegistryStorage",
            "nameLocation": "5340:26:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10247,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10246,
                  "mutability": "mutable",
                  "name": "_identityRegistryStorage",
                  "nameLocation": "5375:24:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10249,
                  "src": "5367:32:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10245,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5367:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5366:34:53"
            },
            "returnParameters": {
              "id": 10248,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5409:0:53"
            },
            "scope": 10365,
            "src": "5331:79:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10250,
              "nodeType": "StructuredDocumentation",
              "src": "5416:304:53",
              "text": "  @dev Replace the actual claimTopicsRegistry contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _claimTopicsRegistry The address of the new claim Topics Registry\n  emits `ClaimTopicsRegistrySet` event"
            },
            "functionSelector": "670af6a9",
            "id": 10255,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setClaimTopicsRegistry",
            "nameLocation": "5734:22:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10253,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10252,
                  "mutability": "mutable",
                  "name": "_claimTopicsRegistry",
                  "nameLocation": "5765:20:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10255,
                  "src": "5757:28:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10251,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5757:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "5756:30:53"
            },
            "returnParameters": {
              "id": 10254,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "5795:0:53"
            },
            "scope": 10365,
            "src": "5725:71:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10256,
              "nodeType": "StructuredDocumentation",
              "src": "5802:316:53",
              "text": "  @dev Replace the actual trustedIssuersRegistry contract with a new one.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _trustedIssuersRegistry The address of the new Trusted Issuers Registry\n  emits `TrustedIssuersRegistrySet` event"
            },
            "functionSelector": "e744d789",
            "id": 10261,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "setTrustedIssuersRegistry",
            "nameLocation": "6132:25:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10259,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10258,
                  "mutability": "mutable",
                  "name": "_trustedIssuersRegistry",
                  "nameLocation": "6166:23:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10261,
                  "src": "6158:31:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10257,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6158:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6157:33:53"
            },
            "returnParameters": {
              "id": 10260,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6199:0:53"
            },
            "scope": 10365,
            "src": "6123:77:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10262,
              "nodeType": "StructuredDocumentation",
              "src": "6206:410:53",
              "text": "  @dev Updates the country corresponding to a user address.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _country The new country of the user\n  emits `CountryUpdated` event"
            },
            "functionSelector": "3b239a7f",
            "id": 10269,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateCountry",
            "nameLocation": "6630:13:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10267,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10264,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "6652:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10269,
                  "src": "6644:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10263,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6644:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10266,
                  "mutability": "mutable",
                  "name": "_country",
                  "nameLocation": "6673:8:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10269,
                  "src": "6666:15:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 10265,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "6666:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "6643:39:53"
            },
            "returnParameters": {
              "id": 10268,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "6691:0:53"
            },
            "scope": 10365,
            "src": "6621:71:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10270,
              "nodeType": "StructuredDocumentation",
              "src": "6698:526:53",
              "text": "  @dev Updates an identity contract corresponding to a user address.\n  Requires that the user address should be the owner of the identity contract.\n  Requires that the user should have an identity contract already deployed that will be replaced.\n  This function can only be called by a wallet set as agent of the smart contract\n  @param _userAddress The address of the user\n  @param _identity The address of the user's new identity contract\n  emits `IdentityUpdated` event"
            },
            "functionSelector": "8e098ca1",
            "id": 10278,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "updateIdentity",
            "nameLocation": "7238:14:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10276,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10272,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "7261:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10278,
                  "src": "7253:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10271,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "7253:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10275,
                  "mutability": "mutable",
                  "name": "_identity",
                  "nameLocation": "7285:9:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10278,
                  "src": "7275:19:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10274,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10273,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "7275:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "7275:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "7252:43:53"
            },
            "returnParameters": {
              "id": 10277,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "7304:0:53"
            },
            "scope": 10365,
            "src": "7229:76:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10279,
              "nodeType": "StructuredDocumentation",
              "src": "7311:701:53",
              "text": "  @dev function allowing to register identities in batch\n  This function can only be called by a wallet set as agent of the smart contract\n  Requires that none of the users has an identity contract already registered.\n  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,\n  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION\n  @param _userAddresses The addresses of the users\n  @param _identities The addresses of the corresponding identity contracts\n  @param _countries The countries of the corresponding investors\n  emits _userAddresses.length `IdentityRegistered` events"
            },
            "functionSelector": "653dc9f1",
            "id": 10292,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "batchRegisterIdentity",
            "nameLocation": "8026:21:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10290,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10282,
                  "mutability": "mutable",
                  "name": "_userAddresses",
                  "nameLocation": "8076:14:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10292,
                  "src": "8057:33:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_address_$dyn_calldata_ptr",
                    "typeString": "address[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10280,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "8057:7:53",
                      "stateMutability": "nonpayable",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "id": 10281,
                    "nodeType": "ArrayTypeName",
                    "src": "8057:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
                      "typeString": "address[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10286,
                  "mutability": "mutable",
                  "name": "_identities",
                  "nameLocation": "8121:11:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10292,
                  "src": "8100:32:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_contract$_IIdentity_$1743_$dyn_calldata_ptr",
                    "typeString": "contract IIdentity[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10284,
                      "nodeType": "UserDefinedTypeName",
                      "pathNode": {
                        "id": 10283,
                        "name": "IIdentity",
                        "nodeType": "IdentifierPath",
                        "referencedDeclaration": 1743,
                        "src": "8100:9:53"
                      },
                      "referencedDeclaration": 1743,
                      "src": "8100:9:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IIdentity_$1743",
                        "typeString": "contract IIdentity"
                      }
                    },
                    "id": 10285,
                    "nodeType": "ArrayTypeName",
                    "src": "8100:11:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_contract$_IIdentity_$1743_$dyn_storage_ptr",
                      "typeString": "contract IIdentity[]"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 10289,
                  "mutability": "mutable",
                  "name": "_countries",
                  "nameLocation": "8160:10:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10292,
                  "src": "8142:28:53",
                  "stateVariable": false,
                  "storageLocation": "calldata",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_uint16_$dyn_calldata_ptr",
                    "typeString": "uint16[]"
                  },
                  "typeName": {
                    "baseType": {
                      "id": 10287,
                      "name": "uint16",
                      "nodeType": "ElementaryTypeName",
                      "src": "8142:6:53",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint16",
                        "typeString": "uint16"
                      }
                    },
                    "id": 10288,
                    "nodeType": "ArrayTypeName",
                    "src": "8142:8:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_array$_t_uint16_$dyn_storage_ptr",
                      "typeString": "uint16[]"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8047:129:53"
            },
            "returnParameters": {
              "id": 10291,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "8185:0:53"
            },
            "scope": 10365,
            "src": "8017:169:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10293,
              "nodeType": "StructuredDocumentation",
              "src": "8192:292:53",
              "text": "  @dev This functions checks whether a wallet has its Identity registered or not\n  in the Identity Registry.\n  @param _userAddress The address of the user to be checked.\n  @return 'True' if the address is contained in the Identity Registry, 'false' if not."
            },
            "functionSelector": "5dbe47e8",
            "id": 10300,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "contains",
            "nameLocation": "8498:8:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10296,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10295,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "8515:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10300,
                  "src": "8507:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10294,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8507:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8506:22:53"
            },
            "returnParameters": {
              "id": 10299,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10298,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10300,
                  "src": "8552:4:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10297,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "8552:4:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8551:6:53"
            },
            "scope": 10365,
            "src": "8489:69:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10301,
              "nodeType": "StructuredDocumentation",
              "src": "8564:391:53",
              "text": "  @dev This functions checks whether an identity contract\n  corresponding to the provided user address has the required claims or not based\n  on the data fetched from trusted issuers registry and from the claim topics registry\n  @param _userAddress The address of the user to be verified.\n  @return 'True' if the address is verified, 'false' if not."
            },
            "functionSelector": "b9209e33",
            "id": 10308,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "isVerified",
            "nameLocation": "8969:10:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10304,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10303,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "8988:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10308,
                  "src": "8980:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10302,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "8980:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "8979:22:53"
            },
            "returnParameters": {
              "id": 10307,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10306,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10308,
                  "src": "9025:4:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "typeName": {
                    "id": 10305,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "9025:4:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9024:6:53"
            },
            "scope": 10365,
            "src": "8960:71:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10309,
              "nodeType": "StructuredDocumentation",
              "src": "9037:117:53",
              "text": "  @dev Returns the onchainID of an investor.\n  @param _userAddress The wallet of the investor"
            },
            "functionSelector": "f0eb5e54",
            "id": 10317,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "identity",
            "nameLocation": "9168:8:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10312,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10311,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "9185:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10317,
                  "src": "9177:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10310,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9177:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9176:22:53"
            },
            "returnParameters": {
              "id": 10316,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10315,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10317,
                  "src": "9222:9:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentity_$1743",
                    "typeString": "contract IIdentity"
                  },
                  "typeName": {
                    "id": 10314,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10313,
                      "name": "IIdentity",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 1743,
                      "src": "9222:9:53"
                    },
                    "referencedDeclaration": 1743,
                    "src": "9222:9:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentity_$1743",
                      "typeString": "contract IIdentity"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9221:11:53"
            },
            "scope": 10365,
            "src": "9159:74:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10318,
              "nodeType": "StructuredDocumentation",
              "src": "9239:120:53",
              "text": "  @dev Returns the country code of an investor.\n  @param _userAddress The wallet of the investor"
            },
            "functionSelector": "7e42683b",
            "id": 10325,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "investorCountry",
            "nameLocation": "9373:15:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10321,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10320,
                  "mutability": "mutable",
                  "name": "_userAddress",
                  "nameLocation": "9397:12:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10325,
                  "src": "9389:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10319,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "9389:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9388:22:53"
            },
            "returnParameters": {
              "id": 10324,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10323,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10325,
                  "src": "9434:6:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint16",
                    "typeString": "uint16"
                  },
                  "typeName": {
                    "id": 10322,
                    "name": "uint16",
                    "nodeType": "ElementaryTypeName",
                    "src": "9434:6:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint16",
                      "typeString": "uint16"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9433:8:53"
            },
            "scope": 10365,
            "src": "9364:78:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10326,
              "nodeType": "StructuredDocumentation",
              "src": "9448:100:53",
              "text": "  @dev Returns the IdentityRegistryStorage linked to the current IdentityRegistry."
            },
            "functionSelector": "f11abfd8",
            "id": 10332,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "identityStorage",
            "nameLocation": "9562:15:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10327,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9577:2:53"
            },
            "returnParameters": {
              "id": 10331,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10330,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10332,
                  "src": "9603:24:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IIdentityRegistryStorage_$10487",
                    "typeString": "contract IIdentityRegistryStorage"
                  },
                  "typeName": {
                    "id": 10329,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10328,
                      "name": "IIdentityRegistryStorage",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10487,
                      "src": "9603:24:53"
                    },
                    "referencedDeclaration": 10487,
                    "src": "9603:24:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IIdentityRegistryStorage_$10487",
                      "typeString": "contract IIdentityRegistryStorage"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9602:26:53"
            },
            "scope": 10365,
            "src": "9553:76:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10333,
              "nodeType": "StructuredDocumentation",
              "src": "9635:99:53",
              "text": "  @dev Returns the TrustedIssuersRegistry linked to the current IdentityRegistry."
            },
            "functionSelector": "b4f3fcb7",
            "id": 10339,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "issuersRegistry",
            "nameLocation": "9748:15:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10334,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9763:2:53"
            },
            "returnParameters": {
              "id": 10338,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10337,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10339,
                  "src": "9789:23:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ITrustedIssuersRegistry_$10584",
                    "typeString": "contract ITrustedIssuersRegistry"
                  },
                  "typeName": {
                    "id": 10336,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10335,
                      "name": "ITrustedIssuersRegistry",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10584,
                      "src": "9789:23:53"
                    },
                    "referencedDeclaration": 10584,
                    "src": "9789:23:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_ITrustedIssuersRegistry_$10584",
                      "typeString": "contract ITrustedIssuersRegistry"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9788:25:53"
            },
            "scope": 10365,
            "src": "9739:75:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10340,
              "nodeType": "StructuredDocumentation",
              "src": "9820:96:53",
              "text": "  @dev Returns the ClaimTopicsRegistry linked to the current IdentityRegistry."
            },
            "functionSelector": "3b3e12f4",
            "id": 10346,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "topicsRegistry",
            "nameLocation": "9930:14:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10341,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "9944:2:53"
            },
            "returnParameters": {
              "id": 10345,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10344,
                  "mutability": "mutable",
                  "name": "",
                  "nameLocation": "-1:-1:-1",
                  "nodeType": "VariableDeclaration",
                  "scope": 10346,
                  "src": "9970:20:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IClaimTopicsRegistry_$10172",
                    "typeString": "contract IClaimTopicsRegistry"
                  },
                  "typeName": {
                    "id": 10343,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 10342,
                      "name": "IClaimTopicsRegistry",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 10172,
                      "src": "9970:20:53"
                    },
                    "referencedDeclaration": 10172,
                    "src": "9970:20:53",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IClaimTopicsRegistry_$10172",
                      "typeString": "contract IClaimTopicsRegistry"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "9969:22:53"
            },
            "scope": 10365,
            "src": "9921:71:53",
            "stateMutability": "view",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10347,
              "nodeType": "StructuredDocumentation",
              "src": "9998:239:53",
              "text": "  @notice Transfers the Ownership of the Identity Registry to a new Owner.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _newOwner The new owner of this contract."
            },
            "functionSelector": "ce240d9c",
            "id": 10352,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "transferOwnershipOnIdentityRegistryContract",
            "nameLocation": "10251:43:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10350,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10349,
                  "mutability": "mutable",
                  "name": "_newOwner",
                  "nameLocation": "10303:9:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10352,
                  "src": "10295:17:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10348,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10295:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10294:19:53"
            },
            "returnParameters": {
              "id": 10351,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10322:0:53"
            },
            "scope": 10365,
            "src": "10242:81:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10353,
              "nodeType": "StructuredDocumentation",
              "src": "10329:229:53",
              "text": "  @notice Adds an address as _agent of the Identity Registry Contract.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _agent The _agent's address to add."
            },
            "functionSelector": "50bc7bda",
            "id": 10358,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "addAgentOnIdentityRegistryContract",
            "nameLocation": "10572:34:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10356,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10355,
                  "mutability": "mutable",
                  "name": "_agent",
                  "nameLocation": "10615:6:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10358,
                  "src": "10607:14:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10354,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10607:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10606:16:53"
            },
            "returnParameters": {
              "id": 10357,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10631:0:53"
            },
            "scope": 10365,
            "src": "10563:69:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          },
          {
            "documentation": {
              "id": 10359,
              "nodeType": "StructuredDocumentation",
              "src": "10638:243:53",
              "text": "  @notice Removes an address from being _agent of the Identity Registry Contract.\n  This function can only be called by the wallet set as owner of the smart contract\n  @param _agent The _agent's address to remove."
            },
            "functionSelector": "5e5741f3",
            "id": 10364,
            "implemented": false,
            "kind": "function",
            "modifiers": [],
            "name": "removeAgentOnIdentityRegistryContract",
            "nameLocation": "10895:37:53",
            "nodeType": "FunctionDefinition",
            "parameters": {
              "id": 10362,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 10361,
                  "mutability": "mutable",
                  "name": "_agent",
                  "nameLocation": "10941:6:53",
                  "nodeType": "VariableDeclaration",
                  "scope": 10364,
                  "src": "10933:14:53",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  },
                  "typeName": {
                    "id": 10360,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "10933:7:53",
                    "stateMutability": "nonpayable",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "10932:16:53"
            },
            "returnParameters": {
              "id": 10363,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "10957:0:53"
            },
            "scope": 10365,
            "src": "10886:72:53",
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "external"
          }
        ],
        "scope": 10366,
        "src": "1401:9559:53",
        "usedErrors": []
      }
    ],
    "src": "1093:9868:53"
  },
  "compiler": {
    "name": "solc",
    "version": "0.8.15+commit.e14f2714.Emscripten.clang"
  },
  "networks": {},
  "schemaVersion": "3.4.6",
  "updatedAt": "2022-08-03T10:43:51.336Z",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "addAgentOnIdentityRegistryContract(address)": {
        "params": {
          "_agent": "The _agent's address to add."
        }
      },
      "batchRegisterIdentity(address[],address[],uint16[])": {
        "details": "function allowing to register identities in batch  This function can only be called by a wallet set as agent of the smart contract  Requires that none of the users has an identity contract already registered.  IMPORTANT : THIS TRANSACTION COULD EXCEED GAS LIMIT IF `_userAddresses.length` IS TOO HIGH,  USE WITH CARE OR YOU COULD LOSE TX FEES WITH AN \"OUT OF GAS\" TRANSACTION",
        "params": {
          "_countries": "The countries of the corresponding investors  emits _userAddresses.length `IdentityRegistered` events",
          "_identities": "The addresses of the corresponding identity contracts",
          "_userAddresses": "The addresses of the users"
        }
      },
      "contains(address)": {
        "details": "This functions checks whether a wallet has its Identity registered or not  in the Identity Registry.",
        "params": {
          "_userAddress": "The address of the user to be checked."
        },
        "returns": {
          "_0": "'True' if the address is contained in the Identity Registry, 'false' if not."
        }
      },
      "deleteIdentity(address)": {
        "details": "Removes an user from the identity registry.  Requires that the user have an identity contract already deployed that will be deleted.  This function can only be called by a wallet set as agent of the smart contract",
        "params": {
          "_userAddress": "The address of the user to be removed  emits `IdentityRemoved` event"
        }
      },
      "identity(address)": {
        "details": "Returns the onchainID of an investor.",
        "params": {
          "_userAddress": "The wallet of the investor"
        }
      },
      "identityStorage()": {
        "details": "Returns the IdentityRegistryStorage linked to the current IdentityRegistry."
      },
      "investorCountry(address)": {
        "details": "Returns the country code of an investor.",
        "params": {
          "_userAddress": "The wallet of the investor"
        }
      },
      "isVerified(address)": {
        "details": "This functions checks whether an identity contract  corresponding to the provided user address has the required claims or not based  on the data fetched from trusted issuers registry and from the claim topics registry",
        "params": {
          "_userAddress": "The address of the user to be verified."
        },
        "returns": {
          "_0": "'True' if the address is verified, 'false' if not."
        }
      },
      "issuersRegistry()": {
        "details": "Returns the TrustedIssuersRegistry linked to the current IdentityRegistry."
      },
      "registerIdentity(address,address,uint16)": {
        "details": "Register an identity contract corresponding to a user address.  Requires that the user doesn't have an identity contract already registered.  This function can only be called by a wallet set as agent of the smart contract",
        "params": {
          "_country": "The country of the investor  emits `IdentityRegistered` event",
          "_identity": "The address of the user's identity contract",
          "_userAddress": "The address of the user"
        }
      },
      "removeAgentOnIdentityRegistryContract(address)": {
        "params": {
          "_agent": "The _agent's address to remove."
        }
      },
      "setClaimTopicsRegistry(address)": {
        "details": "Replace the actual claimTopicsRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract",
        "params": {
          "_claimTopicsRegistry": "The address of the new claim Topics Registry  emits `ClaimTopicsRegistrySet` event"
        }
      },
      "setIdentityRegistryStorage(address)": {
        "details": "Replace the actual identityRegistryStorage contract with a new one.  This function can only be called by the wallet set as owner of the smart contract",
        "params": {
          "_identityRegistryStorage": "The address of the new Identity Registry Storage  emits `IdentityStorageSet` event"
        }
      },
      "setTrustedIssuersRegistry(address)": {
        "details": "Replace the actual trustedIssuersRegistry contract with a new one.  This function can only be called by the wallet set as owner of the smart contract",
        "params": {
          "_trustedIssuersRegistry": "The address of the new Trusted Issuers Registry  emits `TrustedIssuersRegistrySet` event"
        }
      },
      "topicsRegistry()": {
        "details": "Returns the ClaimTopicsRegistry linked to the current IdentityRegistry."
      },
      "transferOwnershipOnIdentityRegistryContract(address)": {
        "params": {
          "_newOwner": "The new owner of this contract."
        }
      },
      "updateCountry(address,uint16)": {
        "details": "Updates the country corresponding to a user address.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract",
        "params": {
          "_country": "The new country of the user  emits `CountryUpdated` event",
          "_userAddress": "The address of the user"
        }
      },
      "updateIdentity(address,address)": {
        "details": "Updates an identity contract corresponding to a user address.  Requires that the user address should be the owner of the identity contract.  Requires that the user should have an identity contract already deployed that will be replaced.  This function can only be called by a wallet set as agent of the smart contract",
        "params": {
          "_identity": "The address of the user's new identity contract  emits `IdentityUpdated` event",
          "_userAddress": "The address of the user"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "ClaimTopicsRegistrySet(address)": {
        "notice": "this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimTopicsRegistry` is the address of the Claim Topics Registry contract"
      },
      "CountryUpdated(address,uint16)": {
        "notice": "this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country"
      },
      "IdentityRegistered(address,address)": {
        "notice": "this event is emitted when an Identity is registered into the Identity Registry.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
      },
      "IdentityRemoved(address,address)": {
        "notice": "this event is emitted when an Identity is removed from the Identity Registry.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
      },
      "IdentityStorageSet(address)": {
        "notice": "this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `identityStorage` is the address of the Identity Registry Storage contract"
      },
      "IdentityUpdated(address,address)": {
        "notice": "this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's"
      },
      "TrustedIssuersRegistrySet(address)": {
        "notice": "this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract"
      }
    },
    "kind": "user",
    "methods": {
      "addAgentOnIdentityRegistryContract(address)": {
        "notice": "Adds an address as _agent of the Identity Registry Contract.  This function can only be called by the wallet set as owner of the smart contract"
      },
      "removeAgentOnIdentityRegistryContract(address)": {
        "notice": "Removes an address from being _agent of the Identity Registry Contract.  This function can only be called by the wallet set as owner of the smart contract"
      },
      "transferOwnershipOnIdentityRegistryContract(address)": {
        "notice": "Transfers the Ownership of the Identity Registry to a new Owner.  This function can only be called by the wallet set as owner of the smart contract"
      }
    },
    "version": 1
  }
}