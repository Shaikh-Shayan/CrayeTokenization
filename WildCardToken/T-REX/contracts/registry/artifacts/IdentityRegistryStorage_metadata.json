{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "AgentAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "AgentRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "investorAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint16",
						"name": "country",
						"type": "uint16"
					}
				],
				"name": "CountryModified",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IIdentity",
						"name": "oldIdentity",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IIdentity",
						"name": "newIdentity",
						"type": "address"
					}
				],
				"name": "IdentityModified",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "identityRegistry",
						"type": "address"
					}
				],
				"name": "IdentityRegistryBound",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "identityRegistry",
						"type": "address"
					}
				],
				"name": "IdentityRegistryUnbound",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "investorAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IIdentity",
						"name": "identity",
						"type": "address"
					}
				],
				"name": "IdentityStored",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "investorAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IIdentity",
						"name": "identity",
						"type": "address"
					}
				],
				"name": "IdentityUnstored",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "addAgent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					},
					{
						"internalType": "contract IIdentity",
						"name": "_identity",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "_country",
						"type": "uint16"
					}
				],
				"name": "addIdentityToStorage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_identityRegistry",
						"type": "address"
					}
				],
				"name": "bindIdentityRegistry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "isAgent",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "linkedIdentityRegistries",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					},
					{
						"internalType": "contract IIdentity",
						"name": "_identity",
						"type": "address"
					}
				],
				"name": "modifyStoredIdentity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "_country",
						"type": "uint16"
					}
				],
				"name": "modifyStoredInvestorCountry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "removeAgent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "removeIdentityFromStorage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "storedIdentity",
				"outputs": [
					{
						"internalType": "contract IIdentity",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "storedInvestorCountry",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnershipOnIdentityRegistryStorage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_identityRegistry",
						"type": "address"
					}
				],
				"name": "unbindIdentityRegistry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"addIdentityToStorage(address,address,uint16)": {
					"details": "See {IIdentityRegistryStorage-addIdentityToStorage}."
				},
				"bindIdentityRegistry(address)": {
					"details": "See {IIdentityRegistryStorage-bindIdentityRegistry}."
				},
				"linkedIdentityRegistries()": {
					"details": "See {IIdentityRegistryStorage-linkedIdentityRegistries}."
				},
				"modifyStoredIdentity(address,address)": {
					"details": "See {IIdentityRegistryStorage-modifyStoredIdentity}."
				},
				"modifyStoredInvestorCountry(address,uint16)": {
					"details": "See {IIdentityRegistryStorage-modifyStoredInvestorCountry}."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removeIdentityFromStorage(address)": {
					"details": "See {IIdentityRegistryStorage-removeIdentityFromStorage}."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
				},
				"storedIdentity(address)": {
					"details": "See {IIdentityRegistryStorage-storedIdentity}."
				},
				"storedInvestorCountry(address)": {
					"details": "See {IIdentityRegistryStorage-storedInvestorCountry}."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"transferOwnershipOnIdentityRegistryStorage(address)": {
					"details": "See {IIdentityRegistryStorage-transferOwnershipOnIdentityRegistryStorage}."
				},
				"unbindIdentityRegistry(address)": {
					"details": "See {IIdentityRegistryStorage-unbindIdentityRegistry}."
				}
			},
			"stateVariables": {
				"identities": {
					"details": "mapping between a user address and the corresponding identity"
				},
				"identityRegistries": {
					"details": "array of Identity Registries linked to this storage"
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"CountryModified(address,uint16)": {
					"notice": "this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country"
				},
				"IdentityModified(address,address)": {
					"notice": "this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's"
				},
				"IdentityRegistryBound(address)": {
					"notice": "this event is emitted when an Identity Registry is bound to the storage contract  the event is emitted by the 'addIdentityRegistry' function  `identityRegistry` is the address of the identity registry added"
				},
				"IdentityRegistryUnbound(address)": {
					"notice": "this event is emitted when an Identity Registry is unbound from the storage contract  the event is emitted by the 'removeIdentityRegistry' function  `identityRegistry` is the address of the identity registry removed"
				},
				"IdentityStored(address,address)": {
					"notice": "this event is emitted when an Identity is registered into the storage contract.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
				},
				"IdentityUnstored(address,address)": {
					"notice": "this event is emitted when an Identity is removed from the storage contract.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
				}
			},
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/registry/IdentityRegistryStorage.sol": "IdentityRegistryStorage"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@onchain-id/solidity/contracts/interface/IERC734.sol": {
			"keccak256": "0x3302de9e9fe7a548cb7395b6fda38f952f6a6d1c599dfeee181a1ef80741fc1d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://fc9f00e5b2f1523fecf52b1a833e9263a53edbebb7d1458f9004cfd41dd0402e",
				"dweb:/ipfs/QmWcNcVQrg66KeQz39jPgJun7jF3CbdJKHQa19q97n5Hzb"
			]
		},
		"@onchain-id/solidity/contracts/interface/IERC735.sol": {
			"keccak256": "0x3b77ce6012a96cf0075197cdeb1b98b66ca1722ef23241e40ba6185f03bf4584",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://766e139f0c3cc0c6489561e75df0d8eab8c277f90009e4fa19add4f22bb40d82",
				"dweb:/ipfs/QmcbAReZn9nLcnYn9AHiDmcYJ42JqAU5QSy4dKhUcJUnjy"
			]
		},
		"@onchain-id/solidity/contracts/interface/IIdentity.sol": {
			"keccak256": "0xdcefbe2a850f9f43e959b9f7ed93fd5b35f29ff3dfbfaac7530af737c9eba7c6",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://2e887c7cc67fdb2710c48bed22dbb27880f6dfb84ee93178ad4fcd659099cb96",
				"dweb:/ipfs/QmUuDEsZJC7uQQEErmuNJzePsNgHiTDdS2TuMzG1GRqrC3"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673",
			"license": "MIT",
			"urls": [
				"bzz-raw://40fb1b5102468f783961d0af743f91b9980cf66b50d1d12009f6bb1869cea4d2",
				"dweb:/ipfs/QmYqEbJML4jB1GHbzD4cUZDtJg5wVwNm3vDJq1GbyDus8y"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7",
			"license": "MIT",
			"urls": [
				"bzz-raw://6df0ddf21ce9f58271bdfaa85cde98b200ef242a05a3f85c2bc10a8294800a92",
				"dweb:/ipfs/QmRK2Y5Yc6BK7tGKkgsgn3aJEQGi5aakeSPZvS65PV8Xp3"
			]
		},
		"contracts/registry/IIdentityRegistryStorage.sol": {
			"keccak256": "0x8cd4de1e77c5da8ca2ff732069bc184aef86bcb94f95a5229e5bd6336abbd06d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f88894a3d046940be03a12cc2da3b3fb6efb51e0461fbea060a9a3190cadcf16",
				"dweb:/ipfs/QmNndZUPdpc83A9LungeAsrcencq3CzTum1tkU6KVdSRNC"
			]
		},
		"contracts/registry/IdentityRegistryStorage.sol": {
			"keccak256": "0x040e79ab7ae519a3f153bd7ed1a5240474096b4b978e6cfb2d4c50240a932e79",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://9c1ae05064603d205344a9fc14110b028c6bb9553dace68fbe7382cae6f3f415",
				"dweb:/ipfs/QmYSxMq8sDHfESxkhorrVtUuLrDpqrhGawVivuHti5x8Lm"
			]
		},
		"contracts/roles/AgentRole.sol": {
			"keccak256": "0x2a264adff17bd254164e69c882dc033d8b7e9bc6eab01c5e7d2ad26324a2c953",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://585dfaafc7e37d38ff6f0c5ca4a8e0ad1e92b0babd1f54762bfaa8c67c1ec2d7",
				"dweb:/ipfs/QmXVnTvX1zVVQoxSZBgKRptSVz22T2vyXC3P89Bsv9x7Jg"
			]
		},
		"contracts/roles/Roles.sol": {
			"keccak256": "0x9e018cafd4e2a2890d4ed32f0a4e5edf92fe95000f35b15d7932890bd0efdb95",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://6c07fd269689b662d782817bc4fdfc00d33fd7e320c20916528fff7853847954",
				"dweb:/ipfs/QmUz39kdgQM8M2W2gcBZ8Vi3mzzSmXUx9NXxTJatYYQJyw"
			]
		}
	},
	"version": 1
}